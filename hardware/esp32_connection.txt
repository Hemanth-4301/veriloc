
## Hardware Setup and Flow

### Hardware Components
1. **ESP32 Development Board**:
   - Microcontroller for processing, WiFi connectivity, and interfacing with peripherals.
   - Example: ESP32-WROOM-32 or NodeMCU ESP32.
2. **R307 Fingerprint Sensor**:
   - Captures and authenticates fingerprints, stores templates internally (up to 1000 templates).
   - Communicates via UART (serial communication).
3. **SSD1306 OLED Display** (128x64 pixels):
   - Displays messages (e.g., “Enrolled ID: 1001”, “Access Granted ID: 1001”, “Updated to Vacant”).
   - Uses I2C communication.
4. **Push Buttons** (2x):
   - For setting classroom status to Vacant or Occupied.
   - Connected with internal pull-up resistors.
5. **Additional Components**:
   - Breadboard or PCB for connections.
   - Jumper wires.
   - 3.3V power supply (ESP32 provides this).
   - Optional: 10kΩ resistors for buttons (if external pull-ups are needed).

### Circuit Connections

#### Wiring Diagram
Below is the detailed wiring configuration for connecting the ESP32 to the R307 sensor, SSD1306 OLED, and push buttons.

| Component                | Pin on Component | Pin on ESP32       | Notes                                      |
|--------------------------|------------------|--------------------|--------------------------------------------|
| **R307 Fingerprint Sensor** |                  |                    |                                            |
| VCC                      | VCC              | 3.3V               | Power supply (R307 supports 3.3V–6V)       |
| GND                      | GND              | GND                | Ground connection                         |
| TX (Transmit)            | TX               | GPIO16 (RXD2)      | Serial RX on ESP32                        |
| RX (Receive)             | RX               | GPIO17 (TXD2)      | Serial TX on ESP32                        |
| **SSD1306 OLED Display** |                  |                    | I2C communication (address: 0x3C)         |
| VCC                      | VCC              | 3.3V               | Power supply                              |
| GND                      | GND              | GND                | Ground connection                         |
| SCL (Clock)              | SCL              | GPIO22 (SCL)       | I2C clock line                            |
| SDA (Data)               | SDA              | GPIO21 (SDA)       | I2C data line                             |
| **Vacant Button**        |                  |                    |                                            |
| One terminal             | -                | GPIO12             | Button input (active LOW)                 |
| Other terminal           | -                | GND                | Connected to ground                       |
| **Occupied Button**      |                  |                    |                                            |
| One terminal             | -                | GPIO13             | Button input (active LOW)                 |
| Other terminal           | -                | GND                | Connected to ground                       |

#### Notes on Connections
- **R307 Sensor**:
  - The R307 operates at 3.3V logic, compatible with ESP32. Connect VCC to ESP32’s 3.3V pin to avoid voltage issues.
  - TX (sensor) connects to GPIO16 (RXD2), and RX (sensor) connects to GPIO17 (TXD2) for UART communication.
  - Ensure secure connections, as loose wires can cause communication errors.
- **SSD1306 OLED**:
  - Uses I2C protocol with default address 0x3C (verify with I2C scanner if needed).
  - ESP32’s default I2C pins are GPIO21 (SDA) and GPIO22 (SCL). Ensure pull-up resistors (typically built into the OLED module) are present.
- **Push Buttons**:
  - Connected as active-LOW with internal pull-up resistors enabled on GPIO12 and GPIO13.
  - If external pull-up resistors are needed (e.g., unstable readings), add 10kΩ resistors between each button’s GPIO pin and 3.3V.
- **Power**:
  - ESP32 is powered via USB or an external 5V supply (VIN pin).
  - All components (R307, OLED) use 3.3V from ESP32 to simplify the circuit.
- **Safety**:
  - Double-check connections to avoid short circuits.
  - Use a breadboard for prototyping or solder for a permanent setup.

#### Circuit Assembly Steps
1. **Connect ESP32 to Breadboard**:
   - Place the ESP32 on a breadboard, ensuring access to 3.3V, GND, and GPIO pins.
2. **Wire R307 Sensor**:
   - Connect VCC to ESP32 3.3V, GND to GND.
   - Connect TX (sensor) to GPIO16, RX (sensor) to GPIO17.
3. **Wire SSD1306 OLED**:
   - Connect VCC to ESP32 3.3V, GND to GND.
   - Connect SCL to GPIO22, SDA to GPIO21.
4. **Wire Push Buttons**:
   - For Vacant button: Connect one terminal to GPIO12, other to GND.
   - For Occupied button: Connect one terminal to GPIO13, other to GND.
5. **Verify Connections**:
   - Ensure no loose wires or incorrect connections.
   - Use a multimeter to check continuity if needed.
6. **Power Up**:
   - Connect the ESP32 to a computer via USB for programming and power.
   - Verify the OLED lights up and the R307 sensor’s LED blinks (indicating power).

### Hardware Flow

#### Enrollment Flow (Superadmin)
1. **Setup**:
   - Load `enroll_admin.ino` onto the ESP32 using Arduino IDE.
   - Open Serial Monitor (115200 baud) for input.
2. **Enter Fingerprint ID**:
   - OLED displays “Enter 4-digit ID (1000-9999)”.
   - Superadmin enters a 4-digit ID (e.g., 1001) via Serial Monitor.
   - If ID is invalid (<1000 or >9999), OLED shows “Invalid ID”.
   - If ID is already used, OLED shows “ID In Use: 1001”.
3. **Check for Duplicate Fingerprint**:
   - OLED prompts “Scan Finger” to check if the fingerprint exists.
   - Admin places finger on R307 sensor.
   - If a match is found, OLED shows “Duplicate Found ID: X”.
4. **Enroll Fingerprint**:
   - OLED prompts “Scan Finger 1/2” and “Scan Finger 2/2” for two scans.
   - On success, OLED shows “Enrolled ID: 1001” for 5 seconds.
   - On failure (e.g., inconsistent scans), OLED shows “Scan Error” or “Store Error”.
5. **Record ID**:
   - Superadmin notes the `fingerprintID` (e.g., “John Doe: ID 1001”) for use in the Admin Dashboard.

#### Status Update Flow (Admin)
1. **Setup**:
   - Load `veriloc.ino` onto the ESP32.
   - Ensure WiFi credentials and server URL are configured.
2. **Authenticate Fingerprint**:
   - OLED displays “Scan Fingerprint” and room number (e.g., “ROOM_101”).
   - Admin scans finger on R307 sensor.
   - If matched, OLED shows “Access Granted ID: 1001” for 3 seconds.
   - If no match, OLED shows “Unknown Fingerprint”.
3. **Update Status**:
   - Admin presses Vacant or Occupied button.
   - OLED shows “Updating Vacant ID: 1001” or “Updating Occupied ID: 1001”.
   - ESP32 sends HTTP POST to `/api/rooms/update` with `{ roomNumber, status, fingerprintID }`.
4. **Display Result**:
   - On success (HTTP 200), OLED shows “Updated to Vacant” or “Updated to Occupied”.
   - On unauthorized (HTTP 403), OLED shows “Unauthorized”.
   - On server error (e.g., HTTP 500), OLED shows “Server Error”.
   - On WiFi failure, OLED shows “WiFi Disconnected”.
5. **Reset**:
   - After update attempt, reset authentication, requiring a new fingerprint scan.


---

## Dependencies and Setup

### Arduino Libraries
- **Adafruit_Fingerprint**: For R307 sensor communication.
  - Install via Arduino Library Manager (`Adafruit Fingerprint Sensor`).
- **Adafruit_GFX** and **Adafruit_SSD1306**: For OLED display.
  - Install via Arduino Library Manager (`Adafruit GFX Library`, `Adafruit SSD1306`).
- **WiFi** and **HTTPClient**: For ESP32 WiFi and HTTP requests.
  - Included with the ESP32 Arduino core.
- **SoftwareSerial**: For UART communication with R307.
  - Included with Arduino.

### Installation Steps
1. **Install Arduino IDE**:
   - Download from [arduino.cc](https://www.arduino.cc/en/software).
2. **Add ESP32 Board Support**:
   - In Arduino IDE, go to File > Preferences.
   - Add to Additional Boards Manager URLs: `https://dl.espressif.com/dl/package_esp32_index.json`.
   - Go to Tools > Board > Boards Manager, search for “ESP32”, and install `esp32` by Espressif Systems.
3. **Install Libraries**:
   - Go to Sketch > Include Library > Manage Libraries.
   - Install `Adafruit Fingerprint Sensor`, `Adafruit GFX Library`, `Adafruit SSD1306`.
4. **Configure Hardware**:
   - Wire the circuit as per the table above.
   - Verify connections with a multimeter if needed.
5. **Load Code**:
   - Open `enroll_admin.ino` or `veriloc.ino` in Arduino IDE.
   - Select Board: “ESP32 Dev Module” (or your specific board).
   - Select Port: Your ESP32’s USB port.
   - Update `ssid`, `password`, and `serverUrl` in `veriloc.ino`.
   - Upload the sketch.

---

## Testing the Hardware Flow

### Enrollment Testing
1. **Setup**:
   - Connect the circuit and load `enroll_admin.ino`.
   - Open Serial Monitor (115200 baud).
2. **Test Cases**:
   - **Valid Enrollment**:
     - Enter ID 1001.
     - Place finger (e.g., John Doe’s) for two scans.
     - Expected: OLED shows “Enrolled ID: 1001”, Serial Monitor confirms.
   - **Invalid ID**:
     - Enter ID 123 or 10000.
     - Expected: OLED shows “Invalid ID”, “Use 1000-9999”.
   - **Duplicate ID**:
     - Enroll ID 1001, then try 1001 again.
     - Expected: OLED shows “ID In Use: 1001”.
   - **Duplicate Fingerprint**:
     - Enroll John’s finger as ID 1001, then try enrolling the same finger as ID 1002.
     - Expected: OLED shows “Duplicate Found ID: 1001”.
3. **Record**:
   - Note successful IDs (e.g., “John Doe: ID 1001”).

### Status Update Testing
1. **Setup**:
   - Load `veriloc.ino`, update WiFi and server URL.
   - Ensure backend server is running (e.g., `http://localhost:5000/api/rooms/update`).
   - Add John (fingerprintID: 1001) to Admin collection and authorize for ROOM_101.
2. **Test Cases**:
   - **Successful Update**:
     - Scan John’s finger.
     - Expected: OLED shows “Access Granted ID: 1001”.
     - Press Vacant button.
     - Expected: OLED shows “Updating Vacant ID: 1001”, then “Updated to Vacant”.
   - **Unknown Fingerprint**:
     - Scan an unenrolled finger.
     - Expected: OLED shows “Unknown Fingerprint”.
   - **Unauthorized Admin**:
     - Enroll Jane (ID 1002), add to Admin collection but not ROOM_101’s authorizedAdmins.
     - Scan Jane’s finger, press Vacant.
     - Expected: OLED shows “Access Granted ID: 1002”, then “Unauthorized”.
   - **Server Error**:
     - Stop the backend server, scan John’s finger, press Vacant.
     - Expected: OLED shows “Server Error”.
   - **WiFi Failure**:
     - Use incorrect WiFi credentials.
     - Expected: OLED shows “WiFi Disconnected”.

---

## Debugging Tips
- **Enrollment Issues**:
  - **OLED Blank**: Check I2C connections (SDA, SCL) and address (0x3C).
  - **Sensor Not Found**: Verify R307 TX/RX connections, ensure 3.3V power.
  - **Duplicate Errors**: Use Adafruit’s `Delete` example to remove conflicting templates.
  - Check Serial Monitor for detailed logs.
- **Status Update Issues**:
  - **WiFi Failure**: Verify `ssid` and `password`, check router signal.
  - **Unauthorized**: Confirm `fingerprintID` matches Admin collection and room’s `authorizedAdmins`.
  - **Server Error**: Check backend logs, ensure `/api/rooms/update` is accessible.
- **General**:
  - Use Serial Monitor for real-time debugging.
  - Test each component (OLED, sensor, buttons) individually with example sketches.

---

## Integration with Software
- **Enrollment**:
  - After enrolling (e.g., ID 1001), use the Admin Dashboard’s `AdminForm` to add the admin with the displayed `fingerprintID`.
  - Backend ensures `fingerprintID` uniqueness (via `unique: true`).
- **Status Update**:
  - Hardware sends `{ roomNumber: "ROOM_101", status: "Vacant", fingerprintID: 1001 }` to `/api/rooms/update`.
  - Backend verifies `fingerprintID` and authorization, updates room status.
  - Frontend (`RoomList`) reflects the updated status.

---

This hardware setup and code provide a robust solution for enrolling admins with 4-digit `fingerprintID`s and updating classroom statuses, with clear OLED feedback. If you need additional hardware features (e.g., buzzer for alerts, LED indicators) or further integration details with the software, let me know!